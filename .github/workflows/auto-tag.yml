name: Auto Tag

on:
  push:
    branches: [main]
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch:

# Ensure we only run one tag creation at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-and-tag:
    # Only run if push to main or PR was merged (not just closed)
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for identifying tags

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Run linting
        run: npm run lint

      - name: Get version from package.json
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.package-version.outputs.current-version}}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create and push tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ steps.package-version.outputs.current-version}}" -m "Release v${{ steps.package-version.outputs.current-version}}"
          # Force push in case tag exists remotely but not locally
          git push origin --force "v${{ steps.package-version.outputs.current-version}}"

      - name: Wait for release workflow
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          # Wait for up to 5 minutes for the release workflow to start
          for i in {1..30}; do
            echo "Checking for release workflow (attempt $i)..."
            if gh run list --workflow=release.yml --event=push --json conclusion,status,headBranch --jq '.[] | select(.headBranch=="v${{ steps.package-version.outputs.current-version}}")' | grep -q .; then
              echo "Release workflow found!"
              exit 0
            fi
            sleep 10
          done
          echo "Release workflow did not start within timeout"
          exit 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
